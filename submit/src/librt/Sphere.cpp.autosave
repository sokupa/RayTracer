//----------------------------------------------------------------
// Sphere.cpp
//----------------------------------------------------------------
#include "Sphere.h"
#include <assert.h>
#include <stdio.h>
#include <string>
#include "defs.h"

// constructor
Sphere::Sphere(void)
    : m_radius(0.5)
{
      m_center = STVector3(0,0,0);
}
void Sphere:: mynewCentre(float x, float y, float z){
    m_center = m_center  + STVector3(x, y, z);
}
float Sphere:: myRadius(){
    return m_radius;
}

void Sphere::mynewRadius(float m){
    m_radius = m * m_radius;
}


// clean up here
Sphere::~Sphere()
{

}


//----------------------------------------------------------------------------
// Compute the closest intersection point with the ray
// if it an intersection exist, return true; otherwise false
// return the intersection point information in pIntersection
//-----------------------------------------------------------------------------
bool Sphere::FindIntersection(Ray ray, Intersection *pIntersection)
{

    bool bFound = false;

    // TO DO: Proj2 raytracer
    // CAP5705 - Find Intersections.
    // 1. Find intersections with this object along the Ray ray
    // 2. Store the results of the intersection
    // 3. if found and return true, otherwise, return false
    // NOTE: The IntersectionPoint pIntersection should store:
    // hit point, surface normal, the time t of the ray at the hit point
    // and the surface being hit
    //------------------------------------------------

   //------------------------------------------------------
   float x = m_centre.x;
   float y = m_centre.y;
   float z = m_centre.z;
   float rx = ray.m_origin.x;
   float ry = ray.m_origin.y;
   float rz = ray.m_origin.z;
   float rdx = ray.m_direction.x;
   float rdy = ray.m_direction.y;  
   float rdz = ray.m_direction.z;
   float a,b,c;
   return(bFound);
}

